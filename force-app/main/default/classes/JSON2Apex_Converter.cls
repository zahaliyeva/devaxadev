// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex_Converter {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Coverages {
        public String name {get;set;} 
        public String id {get;set;} 
        public List<String> shortDescriptionLines {get;set;} 
        public String categoryName {get;set;} 
        public String categoryId {get;set;} 
        public Boolean improvementIndicator {get;set;} 
        public String riderName {get;set;} 
        public List<Beneficiaries> beneficiaries {get;set;} 
        public List<Restrictions> restrictions {get;set;} 
        public Benefit benefit {get;set;} 
        public List<String> clauses {get;set;} 
        public String effectiveDate {get;set;} 
        public String expirationDate {get;set;} 

        public Coverages(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'shortDescriptionLines') {
                            shortDescriptionLines = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                shortDescriptionLines.add(parser.getText());
                            }
                        } else if (text == 'categoryName') {
                            categoryName = parser.getText();
                        } else if (text == 'categoryId') {
                            categoryId = parser.getText();
                        } else if (text == 'improvementIndicator') {
                            improvementIndicator = parser.getBooleanValue();
                        } else if (text == 'riderName') {
                            riderName = parser.getText();
                        } else if (text == 'beneficiaries') {
                            beneficiaries = new List<Beneficiaries>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                beneficiaries.add(new Beneficiaries(parser));
                            }
                        } else if (text == 'restrictions') {
                            restrictions = new List<Restrictions>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                restrictions.add(new Restrictions(parser));
                            }
                        } else if (text == 'benefit') {
                            benefit = new Benefit(parser);
                        } else if (text == 'clauses') {
                            clauses = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                clauses.add(parser.getText());
                            }
                        } else if (text == 'effectiveDate') {
                            effectiveDate = parser.getText();
                        } else if (text == 'expirationDate') {
                            expirationDate = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Coverages consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ScheduledBenefit {
        public Periodicity periodicity {get;set;} 
        public String endDate {get;set;} 
        public String yearlyRenewalDate {get;set;} 

        public ScheduledBenefit(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'periodicity') {
                            periodicity = new Periodicity(parser);
                        } else if (text == 'endDate') {
                            endDate = parser.getText();
                        } else if (text == 'yearlyRenewalDate') {
                            yearlyRenewalDate = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ScheduledBenefit consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public List<Coverages> coverages {get;set;} 

    public JSON2Apex_Converter(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'coverages') {
                        coverages = new List<Coverages>();
                        while (parser.nextToken() != JSONToken.END_ARRAY) {
                            coverages.add(new Coverages(parser));
                        }
                    } else {
                        System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Benefit {
        public List<String> descriptionLines {get;set;} 
        public LumpSumBenefit lumpSumBenefit {get;set;} 
        public ScheduledBenefit scheduledBenefit {get;set;} 

        public Benefit(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'descriptionLines') {
                            descriptionLines = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                descriptionLines.add(parser.getText());
                            }
                        } else if (text == 'lumpSumBenefit') {
                            lumpSumBenefit = new LumpSumBenefit(parser);
                        } else if (text == 'scheduledBenefit') {
                            scheduledBenefit = new ScheduledBenefit(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Benefit consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Periodicity {
        public String code {get;set;} 
        public String name {get;set;} 

        public Periodicity(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'code') {
                            code = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Periodicity consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class LumpSumBenefit {
        public Double value {get;set;} 
        public String currencyCode {get;set;} 

        public LumpSumBenefit(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'value') {
                            value = parser.getDoubleValue();
                        } else if (text == 'currencyCode') {
                            currencyCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'LumpSumBenefit consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Beneficiaries {
        public String beneficiaryName {get;set;} 
        public Integer coverageBenefitPercentage {get;set;} 

        public Beneficiaries(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'beneficiaryName') {
                            beneficiaryName = parser.getText();
                        } else if (text == 'coverageBenefitPercentage') {
                            coverageBenefitPercentage = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Beneficiaries consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Restrictions {
        public String type_Z {get;set;} // in json: type
        public Integer value {get;set;} 
        public String unitCode {get;set;} 
        public String applicationCase {get;set;} 
        public String description {get;set;} 

        public Restrictions(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'value') {
                            value = parser.getIntegerValue();
                        } else if (text == 'unitCode') {
                            unitCode = parser.getText();
                        } else if (text == 'applicationCase') {
                            applicationCase = parser.getText();
                        } else if (text == 'description') {
                            description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Restrictions consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static JSON2Apex_Converter parse(String json) {
        return new JSON2Apex_Converter(System.JSON.createParser(json));
    }
}